// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  MASTER
  OPERADOR
}

enum Status {
  ACTIVE
  INACTIVE
}

// Novos enums de negócio
enum StatusConsultaSPC {
  NAO_REALIZADA
  REALIZADA_SEM_PENDENCIAS
  REALIZADA_COM_PENDENCIAS
}

enum StatusAtividade {
  EXECUCAO
  PREPARACAO_1
  PREPARACAO_2
  PREPARACAO_3
  MANUTENCAO
  SEM_ATIVIDADE
}

enum MedicaoPeriodicidade {
  QUINZENAL
}

model Usuario {
  id         String      @id @default(uuid())
  username   String      @unique
  password   String
  role       Role        @default(OPERADOR)
  status     Status      @default(ACTIVE)
  nome       String
  sobrenome  String
  email      String      @unique
  obras      Obra[]      @relation("UsuarioObras")
  atividades Atividade[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Índices para performance
  @@index([status])
  @@index([role])
  @@index([nome, sobrenome])
}

model Endereco {
  id          String  @id @default(uuid())
  logradouro  String
  numero      String
  complemento String?
  bairro      String
  cidade      String
  estado      String

  // Relações nomeadas com Obra
  obrasEndereco       Obra[] @relation("EnderecoObra")
  obrasEnderecoCnpj   Obra[] @relation("EnderecoCnpj")
  obrasEnderecoAcesso Obra[] @relation("EnderecoAcessoObra")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Índices para consultas geográficas
  @@index([cidade, estado])
  @@index([bairro])
}

model Obra {
  id          String @id @default(uuid())
  nome        String
  cei         String @unique
  construtora String

  // Endereços distintos
  enderecoObraId       String    @map("enderecoId")
  endereco             Endereco  @relation("EnderecoObra", fields: [enderecoObraId], references: [id], onDelete: Cascade)
  enderecoCnpjId       String?
  enderecoCnpj         Endereco? @relation("EnderecoCnpj", fields: [enderecoCnpjId], references: [id], onDelete: SetNull)
  enderecoAcessoObraId String?
  enderecoAcessoObra   Endereco? @relation("EnderecoAcessoObra", fields: [enderecoAcessoObraId], references: [id], onDelete: SetNull)

  valorM2        Decimal
  dataInicio     DateTime
  dataFim        DateTime
  totalGeral     Decimal
  totalExecutado Decimal?
  totalPendente  Decimal?

  // Novos campos cadastrais
  razaoSocial                String?
  cnpj                       String?
  codigoSFOBRAS              String?
  statusConsultaSPC          StatusConsultaSPC    @default(NAO_REALIZADA)
  baseCalcMaoObraMaterial    Decimal?
  baseCalcLocacaoEquip       Decimal?
  medicaoPeriodicidade       MedicaoPeriodicidade @default(QUINZENAL)
  medicaoPeriodoDias         Int                  @default(15)
  medicaoPrazoLiberacaoHoras Int                  @default(48)

  criadoPorId String
  criadoPor   Usuario @relation("UsuarioObras", fields: [criadoPorId], references: [id])

  torres     Torre[]
  atividades Atividade[]
  contatos   ContatoObra[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Índices para performance
  @@index([enderecoObraId])
  @@index([enderecoCnpjId])
  @@index([enderecoAcessoObraId])
  @@index([criadoPorId])
  @@index([nome])
  @@index([construtora])
  @@index([dataInicio, dataFim])
  @@index([criadoPorId, dataInicio])
  @@index([cnpj])
  @@index([codigoSFOBRAS])
  @@index([statusConsultaSPC])
}

model ContatoObra {
  id     String @id @default(uuid())
  obraId String
  obra   Obra   @relation(fields: [obraId], references: [id], onDelete: Cascade)

  funcao   String
  nome     String
  email    String?
  telefone String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([obraId])
}

model Torre {
  id   String @id @default(uuid())
  nome String

  obraId String
  obra   Obra   @relation(fields: [obraId], references: [id], onDelete: Cascade)

  pavimentos Pavimento[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Índices para performance
  @@index([obraId])
  @@index([obraId, nome])
}

model Pavimento {
  id                  String    @id @default(uuid())
  identificador       String
  dataExecucao        DateTime?
  areaExecutadaM2     Decimal?
  areaM2              Decimal
  percentualExecutado Decimal?
  argamassaM3         Decimal
  espessuraCM         Decimal?
  obs                 String?

  // Preparação
  areaPreparadaAcumuladaM2 Decimal? @default(0)
  percentualPreparacao     Decimal? @default(0)
  preparacaoPendente       Boolean  @default(true)

  torreId String
  torre   Torre  @relation(fields: [torreId], references: [id], onDelete: Cascade)

  atividades Atividade[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Índices para performance
  @@index([torreId])
  @@index([torreId, identificador])
  @@index([dataExecucao])
  @@index([percentualExecutado])
  @@index([preparacaoPendente])
  @@index([percentualPreparacao])
}

model Integrante {
  id                   String                @id @default(uuid())
  nome                 String
  cpf                  String                @unique
  atividadeIntegrantes AtividadeIntegrante[]

  createdAt DateTime @default(now())

  // Índices para performance
  @@index([nome])
}

enum Execucao {
  EXECUTADO
  INICIAL
  MEIO
  FINAL
}

model Atividade {
  id               String          @id @default(uuid())
  aditivoM3        Decimal?
  aditivoL         Decimal?
  saldoAcumuladoM2 Decimal?
  execucao         Execucao?
  status           StatusAtividade @default(EXECUCAO)
  areaPreparadaM2  Decimal?
  inicioExpediente DateTime?
  inicioAlmoco     DateTime?
  fimAlmoco        DateTime?
  fimExpediente    DateTime?
  obsExecucao      String?
  obsPonto         String?
  obsQtdBetoneira  String?
  obsHOI           String?

  atividadeIntegrantes AtividadeIntegrante[]

  usuarioId String
  usuario   Usuario @relation(fields: [usuarioId], references: [id])

  obraId String
  obra   Obra   @relation(fields: [obraId], references: [id])

  pavimentoId String
  pavimento   Pavimento @relation(fields: [pavimentoId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Índices críticos para performance
  @@index([usuarioId])
  @@index([obraId])
  @@index([pavimentoId])
  @@index([obraId, usuarioId])
  @@index([obraId, createdAt])
  @@index([usuarioId, createdAt])
  @@index([execucao])
  @@index([status])
  @@index([inicioExpediente])
}

model AtividadeIntegrante {
  id String @id @default(uuid())

  atividadeId String
  atividade   Atividade @relation(fields: [atividadeId], references: [id], onDelete: Cascade)

  integranteId String
  integrante   Integrante @relation(fields: [integranteId], references: [id], onDelete: Cascade)

  producaoM2 Decimal?

  createdAt DateTime @default(now())

  @@unique([atividadeId, integranteId])
  // Índices para performance
  @@index([atividadeId])
  @@index([integranteId])
}
